# Define the constant for the CSV filename

# RUN FROM THE `mailmerge` DIRECTORY, NOT THE `scripts` DIRECTORY

# Change these as needed
CSV_FILENAME = "data/families.csv"
CSV_OUTPUT = "data/families-emails.csv"

# Example record:
# NOTE: For data protection purposes all names are fictional and all shortcodes replaced with the same value.
# {'child1': 'Omar',
#   'child1shortcode': 'kss22',
#   'child2': 'Alex',
#   'child2shortcode': 'kss22',
#   'child3': 'Simran',
#   'child3shortcode': 'kss22',
#   'child4': 'Jack',
#   'child4shortcode': 'kss22',
#   'id': '16',
#   'parent1': 'Amy',
#   'parent1shortcode': 'kss22',
#   'parent2': 'Aaron',
#   'parent2shortcode': 'kss22'},

import csv
from pprint import pprint
import re


def read_csv_to_dicts(filename):
    """
    Reads a CSV file and returns an array of dictionaries.

    :param filename: The name of the CSV file to read.
    :return: A list of dictionaries representing the rows in the CSV file.
    """
    data = []
    with open(filename, mode="r", newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            data.append(row)
    return data


def gen_new_csv_dict(data):
    """
    Takes the MaDs CSV generated by the generateCsv.ts file in the root,
    and then for each family, generates a new record for each member of that family with the same data.

    This is because the mailmerge tool requires a record per recipient.

    :param data: The data to transform.
    :return: A new dictionary.
    """
    new_data = []
    for row in data:
        # List of pairs of (name, shortcode)
        recipients = [
            (row["parent1"], row["parent1shortcode"]),
            (row["parent2"], row["parent2shortcode"]),
            (row["child1"], row["child1shortcode"]),
            (row["child2"], row["child2shortcode"]),
            (row["child3"], row["child3shortcode"]),
            (row["child4"], row["child4shortcode"]),
        ]

        # Filter empty names/shortcode
        recipients = [
            (name, shortcode)
            for name, shortcode in recipients
            if name is not None and name.rstrip() != ""
        ]

        # Generate a record per recipient
        for rname, rshortcode in recipients:
            new_record = {
                "id": row["id"],
                "subject": "Your Family for DoCSoc Mums and Dads 2024",
                "to": rname,
                "email": f"{rshortcode}@ic.ac.uk",
                "parent1": row["parent1"],
                "parent1shortcode": row["parent1shortcode"],
                "parent2": row["parent2"],
                "parent2shortcode": row["parent2shortcode"],
                "child1": row["child1"],
                "child1shortcode": row["child1shortcode"],
                "child2": row["child2"],
                "child2shortcode": row["child2shortcode"],
                # Some families have only 2 children
                "child3": row["child3"] if "child3" in row else "N/A",
                "child3shortcode": (
                    row["child3shortcode"] if "child3shortcode" in row else "N/A"
                ),
                "child4": row["child4"] if "child4" in row else "N/A",
                "child4shortcode": (
                    row["child4shortcode"] if "child4shortcode" in row else "N/A"
                ),
            }
            new_data.append(new_record)

    return new_data


def main():
    print("Reading data from", CSV_FILENAME)
    data = read_csv_to_dicts(CSV_FILENAME)

    print("Transforming data...")
    new_data = gen_new_csv_dict(data)

    # Output to CSV
    print("Writing data to", CSV_OUTPUT)
    with open(CSV_OUTPUT, mode="w", newline="", encoding="utf-8") as csvfile:
        fieldnames = new_data[0].keys()
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for row in new_data:
            writer.writerow(row)
    print("Done!")


# Example usage
if __name__ == "__main__":
    main()
